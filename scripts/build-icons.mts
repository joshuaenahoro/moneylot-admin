import { promises as fs } from 'node:fs';
import * as path from 'node:path';
import { glob } from 'glob';
import { parse } from 'node-html-parser';

const inputDir = './src/icons';
const generatedSpriteFile = './public/sprite.svg';
const generatedTypeFile = './src/types/icon.d.ts';

const files = glob
  .sync('*.svg', {
    cwd: inputDir,
  })
  .sort((a, b) => a.localeCompare(b));

// Exit if no SVG file is found
if (files.length === 0) {
  console.log(`No SVG file found in '${inputDir}'`);
  process.exit(0);
}

const spritesheetContent = await generateSprite({ files, inputDir });
await fs.writeFile(path.join(generatedSpriteFile), spritesheetContent, 'utf-8');

/**
 * Transform each SVG file into a symbol
 * Remove extra attributes not needed in a symbol
 * Remove width and height so that we can control the size of the icon with CSS
 * Wrap them all in a single SVG element
 */

async function generateSprite({
  files,
  inputDir,
}: {
  files: string[];
  inputDir: string;
}) {
  const symbols = await Promise.all(
    files.map(async (file) => {
      const input = await fs.readFile(path.join(inputDir, file), 'utf8');
      const root = parse(input);
      const svg = root.querySelector('svg');
      if (!svg) throw new Error('No SVG element found');
      svg.tagName = 'symbol';
      svg.setAttribute('id', file.replace(/\.svg$/, ''));
      svg.removeAttribute('xmlns');
      svg.removeAttribute('xmlns:xlink');
      svg.removeAttribute('version');
      svg.removeAttribute('width');
      svg.removeAttribute('height');
      return svg.toString().trim();
    }),
  );

  console.log(`Generated sprite with ${files.length} icons`);

  return [
    `<?xml version="1.0" encoding="UTF-8"?>`,
    `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="0" height="0">`,
    `<defs>`, // for semantics: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/defs
    ...symbols,
    `</defs>`,
    `</svg>`,
    '',
  ].join('\n');
}

// Generate a type for each icon name
const typesContent = await generateTypes({
  names: files.map((file) => JSON.stringify(file).replace('.svg', '')),
});

await fs.writeFile(path.join(generatedTypeFile), typesContent, 'utf-8');
console.log(`Generated type file at ${generatedTypeFile}`);

async function generateTypes({ names }: { names: string[] }) {
  return [
    `// This file was auto-generated by running the 'build-icons' script`,
    `// do not edit it manually`,
    '',
    `export type IconName =`,
    ...names.map((name) => `\t| ${name}`),
    '',
  ].join('\n');
}
